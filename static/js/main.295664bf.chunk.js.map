{"version":3,"sources":["components/Row/Row.js","components/Gameboard/Gameboard.js","components/Square/Square.js","utils/board.js","components/App/App.js","components/GameStatus/GameStatus.js","index.js"],"names":["Row","row","onClick","className","map","square","x","key","Gameboard","board","y","Square","classNames","lighted","onKeyPress","role","aria-label","aria-checked","tabIndex","EMPTY_BOARD","generateBoard","i","updateBoard","getRandomPositionOnBoard","newBoard","JSON","parse","stringify","length","getInitialSolutionCountBoard","boardLength","Math","floor","random","App","solutionBoard","useState","setBoard","solutionCountBoard","setSolutionCountBoard","playerMoveCount","setPlayerMoveCount","isWinnerWinnerChickenDinner","indexOf","isWin","newSolutionBoard","updateSolutionCountBoard","playerMoves","minimumMoves","reduce","totalCount","filter","GameStatus","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.295664bf.chunk.js","sourcesContent":["import React from 'react';\nimport Types from 'prop-types';\n\nimport { Square } from '..';\n\nimport './Row.css';\n\nconst Row = ({ row, onClick }) => (\n  <div className=\"row\">\n    {row.map((square, x) => (\n      // eslint-disable-next-line react/no-array-index-key\n      <Square key={x} square={square} onClick={() => onClick({ x })} />\n    ))}\n  </div>\n);\n\nRow.propTypes = {\n  row: Types.arrayOf(Types.number).isRequired,\n  onClick: Types.func.isRequired,\n};\n\nexport default Row;\n","import React from 'react';\nimport Types from 'prop-types';\n\nimport { Row } from '..';\n\nconst Gameboard = ({ board, onClick }) => (\n  <>\n    {board.map((row, y) => (\n      // eslint-disable-next-line react/no-array-index-key\n      <Row key={y} row={row} y={y} onClick={({ x }) => onClick({ x, y })} />\n    ))}\n  </>\n);\n\nGameboard.propTypes = {\n  board: Types.arrayOf(Types.arrayOf(Types.number.isRequired).isRequired).isRequired,\n  onClick: Types.func.isRequired,\n};\n\nexport default Gameboard;\n","import Types from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\n\nimport './Square.css';\n\nconst Square = ({ square, onClick }) => (\n  <div\n    className={classNames('square', { lighted: square })}\n    onClick={onClick}\n    onKeyPress={() => {}}\n    role=\"checkbox\"\n    aria-label=\"square\"\n    aria-checked={!!square}\n    tabIndex=\"0\"\n  />\n);\n\nSquare.propTypes = {\n  square: Types.number.isRequired,\n  onClick: Types.func.isRequired,\n};\n\nexport default Square;\n","const EMPTY_BOARD = [\n  [0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0],\n];\n\nexport function generateBoard() {\n  // TESTING ONE:\n  // return [\n  //   [0, 1, 0, 0, 0],\n  //   [0, 0, 1, 1, 0],\n  //   [1, 1, 0, 0, 1],\n  //   [1, 0, 0, 0, 0],\n  //   [0, 0, 1, 1, 1],\n  // ];\n\n  const roundsToMakeAFakeMove = 300;\n  let board = EMPTY_BOARD;\n\n  for (let i = 0; i < roundsToMakeAFakeMove; i++) {\n    const square = getRandomPositionOnBoard();\n\n    board = updateBoard(board, square);\n  }\n\n  return board;\n}\n\nexport function updateBoard(board, { x, y }) {\n  const newBoard = JSON.parse(JSON.stringify(board));\n\n  newBoard[y][x] = newBoard[y][x] ? 0 : 1;\n\n  if (x > 0) {\n    newBoard[y][x - 1] = newBoard[y][x - 1] ? 0 : 1;\n  }\n  if (x < newBoard[y].length - 1) {\n    newBoard[y][x + 1] = newBoard[y][x + 1] ? 0 : 1;\n  }\n  if (y > 0) {\n    newBoard[y - 1][x] = newBoard[y - 1][x] ? 0 : 1;\n  }\n  if (y < newBoard.length - 1) {\n    newBoard[y + 1][x] = newBoard[y + 1][x] ? 0 : 1;\n  }\n\n  return newBoard;\n}\n\nexport function isWin(board) {\n  for (let i = 0; i < board.length; i++) {\n    if (board[i].indexOf(1) !== -1) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function getInitialSolutionCountBoard() {\n  return EMPTY_BOARD;\n}\n\nexport function updateSolutionCountBoard(solutionBoard, { x, y }) {\n  const newSolutionBoard = JSON.parse(JSON.stringify(solutionBoard));\n\n  newSolutionBoard[y][x] = newSolutionBoard[y][x] ? 0 : 1;\n\n  return newSolutionBoard;\n}\n\nexport function getMinimumMoves(solutionBoard) {\n  return solutionBoard.reduce((totalCount, row) => totalCount + row.filter(x => x).length, 0);\n}\n\nfunction getRandomPositionOnBoard() {\n  const boardLength = EMPTY_BOARD.length;\n\n  return {\n    x: Math.floor(Math.random() * boardLength),\n    y: Math.floor(Math.random() * boardLength),\n  };\n}\n","import React, { useState } from 'react';\n\nimport { Gameboard, GameStatus } from '..';\nimport {\n  generateBoard,\n  updateBoard,\n  isWin,\n  getInitialSolutionCountBoard,\n  updateSolutionCountBoard,\n  getMinimumMoves,\n} from '../../utils';\n\nimport './App.css';\n\nconst App = () => {\n  const [board, setBoard] = useState(() => generateBoard());\n  const [solutionCountBoard, setSolutionCountBoard] = useState(() =>\n    getInitialSolutionCountBoard(),\n  );\n  const [playerMoveCount, setPlayerMoveCount] = useState(0);\n  const isWinnerWinnerChickenDinner = isWin(board);\n\n  return (\n    <div className=\"app\">\n      <h1>Close all the lights!</h1>\n      <Gameboard\n        board={board}\n        onClick={square => {\n          if (isWinnerWinnerChickenDinner) {\n            setPlayerMoveCount(0);\n            setBoard(generateBoard());\n            setSolutionCountBoard(getInitialSolutionCountBoard());\n          } else {\n            setPlayerMoveCount(playerMoveCount + 1);\n            setBoard(updateBoard(board, square));\n            setSolutionCountBoard(updateSolutionCountBoard(solutionCountBoard, square));\n          }\n        }}\n      />\n      {isWinnerWinnerChickenDinner ? (\n        <GameStatus\n          playerMoves={playerMoveCount}\n          minimumMoves={getMinimumMoves(solutionCountBoard)}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport Types from 'prop-types';\n\nconst GameStatus = ({ playerMoves, minimumMoves }) => {\n  return (\n    <div>\n      <h3>You won! Press on the game board to start a new one.</h3>\n      {playerMoves && minimumMoves ? (\n        <p>\n          You switched the lights {playerMoves} times. The game was solvable in {minimumMoves}{' '}\n          moves.\n        </p>\n      ) : null}\n    </div>\n  );\n};\n\nGameStatus.propTypes = {\n  playerMoves: Types.number.isRequired,\n  minimumMoves: Types.number.isRequired,\n};\n\nexport default GameStatus;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}