{"version":3,"sources":["components/Row/Row.js","GameManager.js","components/Gameboard/Gameboard.js","components/Square/Square.js","index.js"],"names":["Row","row","onClick","y","className","map","square","x","key","GameManager","this","field","i","fieldPosition","generateRandomFieldPosition","squareValue","updateField","fieldLength","length","Math","floor","random","newGameField","JSON","parse","stringify","indexOf","Gameboard","props","handleClick","state","isWin","gameManager","generateInitialField","setState","gameField","getField","Component","Square","classNames","lighted","onKeyPress","role","aria-label","aria-checked","tabIndex","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.acbd38b4.chunk.js","sourcesContent":["import React from 'react';\nimport Types from 'prop-types';\n\nimport { Square } from '..';\n\nimport './Row.css';\n\nconst Row = ({ row, onClick, y }) => (\n  <div className=\"row\">\n    {row.map((square, x) => (\n      // eslint-disable-next-line react/no-array-index-key\n      <Square key={x + y} square={square} x={x} y={y} onClick={onClick} />\n    ))}\n  </div>\n);\n\nRow.propTypes = {\n  row: Types.arrayOf(Types.number).isRequired,\n  onClick: Types.func.isRequired,\n  y: Types.number.isRequired,\n};\n\nexport default Row;\n","export default class GameManager {\n  constructor() {\n    this.field = [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n    ];\n  }\n\n  generateInitialField() {\n    // return [[0, 1, 0, 0, 0], [0, 0, 1, 1, 0], [1, 1, 0, 0, 1], [1, 0, 0, 0, 0], [0, 0, 1, 1, 1]];\n    const roundsToMakeAFakeMove = 300;\n\n    for (let i = 0; i < roundsToMakeAFakeMove; i++) {\n      const fieldPosition = this.generateRandomFieldPosition();\n      const { x, y } = fieldPosition;\n\n      const square = {\n        squareValue: this.field[y][x],\n        x,\n        y,\n      };\n\n      this.updateField(square);\n    }\n  }\n\n  generateRandomFieldPosition() {\n    const fieldLength = this.field.length;\n\n    return {\n      x: Math.floor(Math.random() * fieldLength),\n      y: Math.floor(Math.random() * fieldLength),\n    };\n  }\n\n  getField() {\n    return this.field;\n  }\n\n  updateField(square) {\n    const { squareValue, x, y } = square;\n    const newGameField = JSON.parse(JSON.stringify(this.field)); // for multi-dimensional array deepcopy\n\n    newGameField[y][x] = squareValue ? 0 : 1;\n\n    if (x > 0) {\n      newGameField[y][x - 1] = newGameField[y][x - 1] ? 0 : 1;\n    }\n    if (x < newGameField[y].length - 1) {\n      newGameField[y][x + 1] = newGameField[y][x + 1] ? 0 : 1;\n    }\n    if (y > 0) {\n      newGameField[y - 1][x] = newGameField[y - 1][x] ? 0 : 1;\n    }\n    if (y < newGameField.length - 1) {\n      newGameField[y + 1][x] = newGameField[y + 1][x] ? 0 : 1;\n    }\n\n    this.field = newGameField;\n  }\n\n  isWin() {\n    for (let i = 0; i < this.field.length; i++) {\n      if (this.field[i].indexOf(1) !== -1) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","import React, { Component } from 'react';\nimport { Row } from '..';\nimport GameManager from '../../GameManager';\nimport './Gameboard.css';\n\nexport default class Gameboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.gameManager = new GameManager();\n    this.gameManager.generateInitialField();\n    this.state = {\n      gameField: this.gameManager.getField(),\n      isWin: false,\n    };\n  }\n\n  handleClick = square => {\n    if (this.state.isWin) {\n      this.gameManager.generateInitialField();\n    } else {\n      this.gameManager.updateField(square);\n    }\n\n    this.setState({\n      gameField: this.gameManager.getField(),\n      isWin: this.gameManager.isWin(),\n    });\n  };\n\n  render() {\n    const { gameField, isWin } = this.state;\n\n    return (\n      <div className=\"gameboard\">\n        {gameField.map((row, y) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <Row key={y} row={row} y={y} onClick={this.handleClick} />\n        ))}\n        {isWin ? <div className=\"message\">You won! Click to play again</div> : null}\n      </div>\n    );\n  }\n}\n","import Types from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\n\nimport './Square.css';\n\nconst Square = ({ square, x, y, onClick }) => (\n  <div\n    className={classNames('square', { lighted: square })}\n    onClick={() => onClick({ squareValue: square, x, y })}\n    onKeyPress={() => {}}\n    role=\"checkbox\"\n    aria-label=\"square\"\n    aria-checked={!!square}\n    tabIndex=\"0\"\n  />\n);\n\nSquare.propTypes = {\n  square: Types.number.isRequired,\n  x: Types.number.isRequired,\n  y: Types.number.isRequired,\n  onClick: Types.func.isRequired,\n};\n\nexport default Square;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Gameboard } from './components';\nimport './index.css';\n\nReactDOM.render(<Gameboard />, document.getElementById('root'));\n"],"sourceRoot":""}